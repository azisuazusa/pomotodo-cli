// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/azisuazusa/todo-cli/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// AddIntegration provides a mock function with given fields: ctx, integration
func (_m *UseCase) AddIntegration(ctx context.Context, integration entity.Integration) error {
	ret := _m.Called(ctx, integration)

	if len(ret) == 0 {
		panic("no return value specified for AddIntegration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Integration) error); ok {
		r0 = rf(ctx, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_AddIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIntegration'
type UseCase_AddIntegration_Call struct {
	*mock.Call
}

// AddIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integration entity.Integration
func (_e *UseCase_Expecter) AddIntegration(ctx interface{}, integration interface{}) *UseCase_AddIntegration_Call {
	return &UseCase_AddIntegration_Call{Call: _e.mock.On("AddIntegration", ctx, integration)}
}

func (_c *UseCase_AddIntegration_Call) Run(run func(ctx context.Context, integration entity.Integration)) *UseCase_AddIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Integration))
	})
	return _c
}

func (_c *UseCase_AddIntegration_Call) Return(_a0 error) *UseCase_AddIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_AddIntegration_Call) RunAndReturn(run func(context.Context, entity.Integration) error) *UseCase_AddIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UseCase) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Delete(ctx interface{}, id interface{}) *UseCase_Delete_Call {
	return &UseCase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UseCase_Delete_Call) Run(run func(ctx context.Context, id string)) *UseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Delete_Call) Return(_a0 error) *UseCase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Delete_Call) RunAndReturn(run func(context.Context, string) error) *UseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DisableIntegration provides a mock function with given fields: ctx, integrationType
func (_m *UseCase) DisableIntegration(ctx context.Context, integrationType entity.IntegrationType) error {
	ret := _m.Called(ctx, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for DisableIntegration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.IntegrationType) error); ok {
		r0 = rf(ctx, integrationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_DisableIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableIntegration'
type UseCase_DisableIntegration_Call struct {
	*mock.Call
}

// DisableIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType entity.IntegrationType
func (_e *UseCase_Expecter) DisableIntegration(ctx interface{}, integrationType interface{}) *UseCase_DisableIntegration_Call {
	return &UseCase_DisableIntegration_Call{Call: _e.mock.On("DisableIntegration", ctx, integrationType)}
}

func (_c *UseCase_DisableIntegration_Call) Run(run func(ctx context.Context, integrationType entity.IntegrationType)) *UseCase_DisableIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.IntegrationType))
	})
	return _c
}

func (_c *UseCase_DisableIntegration_Call) Return(_a0 error) *UseCase_DisableIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_DisableIntegration_Call) RunAndReturn(run func(context.Context, entity.IntegrationType) error) *UseCase_DisableIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// EnableIntegration provides a mock function with given fields: ctx, integrationType
func (_m *UseCase) EnableIntegration(ctx context.Context, integrationType entity.IntegrationType) error {
	ret := _m.Called(ctx, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for EnableIntegration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.IntegrationType) error); ok {
		r0 = rf(ctx, integrationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_EnableIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableIntegration'
type UseCase_EnableIntegration_Call struct {
	*mock.Call
}

// EnableIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType entity.IntegrationType
func (_e *UseCase_Expecter) EnableIntegration(ctx interface{}, integrationType interface{}) *UseCase_EnableIntegration_Call {
	return &UseCase_EnableIntegration_Call{Call: _e.mock.On("EnableIntegration", ctx, integrationType)}
}

func (_c *UseCase_EnableIntegration_Call) Run(run func(ctx context.Context, integrationType entity.IntegrationType)) *UseCase_EnableIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.IntegrationType))
	})
	return _c
}

func (_c *UseCase_EnableIntegration_Call) Return(_a0 error) *UseCase_EnableIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_EnableIntegration_Call) RunAndReturn(run func(context.Context, entity.IntegrationType) error) *UseCase_EnableIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *UseCase) GetAll(ctx context.Context) (entity.Projects, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 entity.Projects
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Projects, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Projects); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Projects)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UseCase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) GetAll(ctx interface{}) *UseCase_GetAll_Call {
	return &UseCase_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *UseCase_GetAll_Call) Run(run func(ctx context.Context)) *UseCase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_GetAll_Call) Return(_a0 entity.Projects, _a1 error) *UseCase_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_GetAll_Call) RunAndReturn(run func(context.Context) (entity.Projects, error)) *UseCase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelected provides a mock function with given fields: ctx
func (_m *UseCase) GetSelected(ctx context.Context) (entity.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelected")
	}

	var r0 entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Project); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(entity.Project)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_GetSelected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelected'
type UseCase_GetSelected_Call struct {
	*mock.Call
}

// GetSelected is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) GetSelected(ctx interface{}) *UseCase_GetSelected_Call {
	return &UseCase_GetSelected_Call{Call: _e.mock.On("GetSelected", ctx)}
}

func (_c *UseCase_GetSelected_Call) Run(run func(ctx context.Context)) *UseCase_GetSelected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_GetSelected_Call) Return(_a0 entity.Project, _a1 error) *UseCase_GetSelected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_GetSelected_Call) RunAndReturn(run func(context.Context) (entity.Project, error)) *UseCase_GetSelected_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Insert(ctx context.Context, _a1 entity.Project) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Project) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UseCase_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Project
func (_e *UseCase_Expecter) Insert(ctx interface{}, _a1 interface{}) *UseCase_Insert_Call {
	return &UseCase_Insert_Call{Call: _e.mock.On("Insert", ctx, _a1)}
}

func (_c *UseCase_Insert_Call) Run(run func(ctx context.Context, _a1 entity.Project)) *UseCase_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Project))
	})
	return _c
}

func (_c *UseCase_Insert_Call) Return(_a0 error) *UseCase_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Insert_Call) RunAndReturn(run func(context.Context, entity.Project) error) *UseCase_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveIntegration provides a mock function with given fields: ctx, integrationType
func (_m *UseCase) RemoveIntegration(ctx context.Context, integrationType entity.IntegrationType) error {
	ret := _m.Called(ctx, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIntegration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.IntegrationType) error); ok {
		r0 = rf(ctx, integrationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_RemoveIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveIntegration'
type UseCase_RemoveIntegration_Call struct {
	*mock.Call
}

// RemoveIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integrationType entity.IntegrationType
func (_e *UseCase_Expecter) RemoveIntegration(ctx interface{}, integrationType interface{}) *UseCase_RemoveIntegration_Call {
	return &UseCase_RemoveIntegration_Call{Call: _e.mock.On("RemoveIntegration", ctx, integrationType)}
}

func (_c *UseCase_RemoveIntegration_Call) Run(run func(ctx context.Context, integrationType entity.IntegrationType)) *UseCase_RemoveIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.IntegrationType))
	})
	return _c
}

func (_c *UseCase_RemoveIntegration_Call) Return(_a0 error) *UseCase_RemoveIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_RemoveIntegration_Call) RunAndReturn(run func(context.Context, entity.IntegrationType) error) *UseCase_RemoveIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: ctx, id
func (_m *UseCase) Select(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type UseCase_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Select(ctx interface{}, id interface{}) *UseCase_Select_Call {
	return &UseCase_Select_Call{Call: _e.mock.On("Select", ctx, id)}
}

func (_c *UseCase_Select_Call) Run(run func(ctx context.Context, id string)) *UseCase_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Select_Call) Return(_a0 error) *UseCase_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Select_Call) RunAndReturn(run func(context.Context, string) error) *UseCase_Select_Call {
	_c.Call.Return(run)
	return _c
}

// SyncTasks provides a mock function with given fields: ctx
func (_m *UseCase) SyncTasks(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_SyncTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncTasks'
type UseCase_SyncTasks_Call struct {
	*mock.Call
}

// SyncTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) SyncTasks(ctx interface{}) *UseCase_SyncTasks_Call {
	return &UseCase_SyncTasks_Call{Call: _e.mock.On("SyncTasks", ctx)}
}

func (_c *UseCase_SyncTasks_Call) Run(run func(ctx context.Context)) *UseCase_SyncTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_SyncTasks_Call) Return(_a0 error) *UseCase_SyncTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_SyncTasks_Call) RunAndReturn(run func(context.Context) error) *UseCase_SyncTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
