// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/azisuazusa/todo-cli/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

type UseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *UseCase) EXPECT() *UseCase_Expecter {
	return &UseCase_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, _a1
func (_m *UseCase) Add(ctx context.Context, _a1 entity.Task) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Task) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type UseCase_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 entity.Task
func (_e *UseCase_Expecter) Add(ctx interface{}, _a1 interface{}) *UseCase_Add_Call {
	return &UseCase_Add_Call{Call: _e.mock.On("Add", ctx, _a1)}
}

func (_c *UseCase_Add_Call) Run(run func(ctx context.Context, _a1 entity.Task)) *UseCase_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Task))
	})
	return _c
}

func (_c *UseCase_Add_Call) Return(_a0 error) *UseCase_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Add_Call) RunAndReturn(run func(context.Context, entity.Task) error) *UseCase_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Complete provides a mock function with given fields: ctx, id
func (_m *UseCase) Complete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type UseCase_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Complete(ctx interface{}, id interface{}) *UseCase_Complete_Call {
	return &UseCase_Complete_Call{Call: _e.mock.On("Complete", ctx, id)}
}

func (_c *UseCase_Complete_Call) Run(run func(ctx context.Context, id string)) *UseCase_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Complete_Call) Return(_a0 error) *UseCase_Complete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Complete_Call) RunAndReturn(run func(context.Context, string) error) *UseCase_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UseCase) GetByID(ctx context.Context, id string) (entity.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) GetByID(ctx interface{}, id interface{}) *UseCase_GetByID_Call {
	return &UseCase_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UseCase_GetByID_Call) Run(run func(ctx context.Context, id string)) *UseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_GetByID_Call) Return(_a0 entity.Task, _a1 error) *UseCase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_GetByID_Call) RunAndReturn(run func(context.Context, string) (entity.Task, error)) *UseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUncompleteParentTasks provides a mock function with given fields: ctx
func (_m *UseCase) GetUncompleteParentTasks(ctx context.Context) (entity.Tasks, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUncompleteParentTasks")
	}

	var r0 entity.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Tasks, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Tasks); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_GetUncompleteParentTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUncompleteParentTasks'
type UseCase_GetUncompleteParentTasks_Call struct {
	*mock.Call
}

// GetUncompleteParentTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) GetUncompleteParentTasks(ctx interface{}) *UseCase_GetUncompleteParentTasks_Call {
	return &UseCase_GetUncompleteParentTasks_Call{Call: _e.mock.On("GetUncompleteParentTasks", ctx)}
}

func (_c *UseCase_GetUncompleteParentTasks_Call) Run(run func(ctx context.Context)) *UseCase_GetUncompleteParentTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_GetUncompleteParentTasks_Call) Return(_a0 entity.Tasks, _a1 error) *UseCase_GetUncompleteParentTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_GetUncompleteParentTasks_Call) RunAndReturn(run func(context.Context) (entity.Tasks, error)) *UseCase_GetUncompleteParentTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetUncompleteTasks provides a mock function with given fields: ctx
func (_m *UseCase) GetUncompleteTasks(ctx context.Context) (entity.Tasks, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUncompleteTasks")
	}

	var r0 entity.Tasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (entity.Tasks, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) entity.Tasks); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Tasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UseCase_GetUncompleteTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUncompleteTasks'
type UseCase_GetUncompleteTasks_Call struct {
	*mock.Call
}

// GetUncompleteTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) GetUncompleteTasks(ctx interface{}) *UseCase_GetUncompleteTasks_Call {
	return &UseCase_GetUncompleteTasks_Call{Call: _e.mock.On("GetUncompleteTasks", ctx)}
}

func (_c *UseCase_GetUncompleteTasks_Call) Run(run func(ctx context.Context)) *UseCase_GetUncompleteTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_GetUncompleteTasks_Call) Return(_a0 entity.Tasks, _a1 error) *UseCase_GetUncompleteTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UseCase_GetUncompleteTasks_Call) RunAndReturn(run func(context.Context) (entity.Tasks, error)) *UseCase_GetUncompleteTasks_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, id
func (_m *UseCase) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type UseCase_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Remove(ctx interface{}, id interface{}) *UseCase_Remove_Call {
	return &UseCase_Remove_Call{Call: _e.mock.On("Remove", ctx, id)}
}

func (_c *UseCase_Remove_Call) Run(run func(ctx context.Context, id string)) *UseCase_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Remove_Call) Return(_a0 error) *UseCase_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Remove_Call) RunAndReturn(run func(context.Context, string) error) *UseCase_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, id
func (_m *UseCase) Start(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type UseCase_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *UseCase_Expecter) Start(ctx interface{}, id interface{}) *UseCase_Start_Call {
	return &UseCase_Start_Call{Call: _e.mock.On("Start", ctx, id)}
}

func (_c *UseCase_Start_Call) Run(run func(ctx context.Context, id string)) *UseCase_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UseCase_Start_Call) Return(_a0 error) *UseCase_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Start_Call) RunAndReturn(run func(context.Context, string) error) *UseCase_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx
func (_m *UseCase) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseCase_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type UseCase_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UseCase_Expecter) Stop(ctx interface{}) *UseCase_Stop_Call {
	return &UseCase_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *UseCase_Stop_Call) Run(run func(ctx context.Context)) *UseCase_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UseCase_Stop_Call) Return(_a0 error) *UseCase_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UseCase_Stop_Call) RunAndReturn(run func(context.Context) error) *UseCase_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
