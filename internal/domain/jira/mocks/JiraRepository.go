// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/azisuazusa/todo-cli/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JiraRepository is an autogenerated mock type for the JiraRepository type
type JiraRepository struct {
	mock.Mock
}

type JiraRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *JiraRepository) EXPECT() *JiraRepository_Expecter {
	return &JiraRepository_Expecter{mock: &_m.Mock}
}

// AddWorklog provides a mock function with given fields: ctx, issueID, taskName, timeSpent, integrationEntity
func (_m *JiraRepository) AddWorklog(ctx context.Context, issueID string, taskName string, timeSpent time.Duration, integrationEntity entity.Integration) error {
	ret := _m.Called(ctx, issueID, taskName, timeSpent, integrationEntity)

	if len(ret) == 0 {
		panic("no return value specified for AddWorklog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, entity.Integration) error); ok {
		r0 = rf(ctx, issueID, taskName, timeSpent, integrationEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JiraRepository_AddWorklog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorklog'
type JiraRepository_AddWorklog_Call struct {
	*mock.Call
}

// AddWorklog is a helper method to define mock.On call
//   - ctx context.Context
//   - issueID string
//   - taskName string
//   - timeSpent time.Duration
//   - integrationEntity entity.Integration
func (_e *JiraRepository_Expecter) AddWorklog(ctx interface{}, issueID interface{}, taskName interface{}, timeSpent interface{}, integrationEntity interface{}) *JiraRepository_AddWorklog_Call {
	return &JiraRepository_AddWorklog_Call{Call: _e.mock.On("AddWorklog", ctx, issueID, taskName, timeSpent, integrationEntity)}
}

func (_c *JiraRepository_AddWorklog_Call) Run(run func(ctx context.Context, issueID string, taskName string, timeSpent time.Duration, integrationEntity entity.Integration)) *JiraRepository_AddWorklog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(entity.Integration))
	})
	return _c
}

func (_c *JiraRepository_AddWorklog_Call) Return(_a0 error) *JiraRepository_AddWorklog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JiraRepository_AddWorklog_Call) RunAndReturn(run func(context.Context, string, string, time.Duration, entity.Integration) error) *JiraRepository_AddWorklog_Call {
	_c.Call.Return(run)
	return _c
}

// NewJiraRepository creates a new instance of JiraRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJiraRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *JiraRepository {
	mock := &JiraRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
