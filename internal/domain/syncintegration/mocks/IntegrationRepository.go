// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	syncintegration "github.com/azisuazusa/todo-cli/internal/domain/syncintegration"
	mock "github.com/stretchr/testify/mock"
)

// IntegrationRepository is an autogenerated mock type for the IntegrationRepository type
type IntegrationRepository struct {
	mock.Mock
}

type IntegrationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IntegrationRepository) EXPECT() *IntegrationRepository_Expecter {
	return &IntegrationRepository_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: ctx, integration
func (_m *IntegrationRepository) Download(ctx context.Context, integration syncintegration.SyncIntegration) error {
	ret := _m.Called(ctx, integration)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, syncintegration.SyncIntegration) error); ok {
		r0 = rf(ctx, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationRepository_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type IntegrationRepository_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - integration syncintegration.SyncIntegration
func (_e *IntegrationRepository_Expecter) Download(ctx interface{}, integration interface{}) *IntegrationRepository_Download_Call {
	return &IntegrationRepository_Download_Call{Call: _e.mock.On("Download", ctx, integration)}
}

func (_c *IntegrationRepository_Download_Call) Run(run func(ctx context.Context, integration syncintegration.SyncIntegration)) *IntegrationRepository_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(syncintegration.SyncIntegration))
	})
	return _c
}

func (_c *IntegrationRepository_Download_Call) Return(_a0 error) *IntegrationRepository_Download_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationRepository_Download_Call) RunAndReturn(run func(context.Context, syncintegration.SyncIntegration) error) *IntegrationRepository_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, integration
func (_m *IntegrationRepository) Upload(ctx context.Context, integration syncintegration.SyncIntegration) error {
	ret := _m.Called(ctx, integration)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, syncintegration.SyncIntegration) error); ok {
		r0 = rf(ctx, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IntegrationRepository_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type IntegrationRepository_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - integration syncintegration.SyncIntegration
func (_e *IntegrationRepository_Expecter) Upload(ctx interface{}, integration interface{}) *IntegrationRepository_Upload_Call {
	return &IntegrationRepository_Upload_Call{Call: _e.mock.On("Upload", ctx, integration)}
}

func (_c *IntegrationRepository_Upload_Call) Run(run func(ctx context.Context, integration syncintegration.SyncIntegration)) *IntegrationRepository_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(syncintegration.SyncIntegration))
	})
	return _c
}

func (_c *IntegrationRepository_Upload_Call) Return(_a0 error) *IntegrationRepository_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IntegrationRepository_Upload_Call) RunAndReturn(run func(context.Context, syncintegration.SyncIntegration) error) *IntegrationRepository_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewIntegrationRepository creates a new instance of IntegrationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIntegrationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IntegrationRepository {
	mock := &IntegrationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
