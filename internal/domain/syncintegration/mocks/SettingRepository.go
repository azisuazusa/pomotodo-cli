// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	syncintegration "github.com/azisuazusa/todo-cli/internal/domain/syncintegration"
	mock "github.com/stretchr/testify/mock"
)

// SettingRepository is an autogenerated mock type for the SettingRepository type
type SettingRepository struct {
	mock.Mock
}

type SettingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SettingRepository) EXPECT() *SettingRepository_Expecter {
	return &SettingRepository_Expecter{mock: &_m.Mock}
}

// GetSyncIntegration provides a mock function with given fields: ctx
func (_m *SettingRepository) GetSyncIntegration(ctx context.Context) (syncintegration.SyncIntegration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncIntegration")
	}

	var r0 syncintegration.SyncIntegration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (syncintegration.SyncIntegration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) syncintegration.SyncIntegration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(syncintegration.SyncIntegration)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SettingRepository_GetSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncIntegration'
type SettingRepository_GetSyncIntegration_Call struct {
	*mock.Call
}

// GetSyncIntegration is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SettingRepository_Expecter) GetSyncIntegration(ctx interface{}) *SettingRepository_GetSyncIntegration_Call {
	return &SettingRepository_GetSyncIntegration_Call{Call: _e.mock.On("GetSyncIntegration", ctx)}
}

func (_c *SettingRepository_GetSyncIntegration_Call) Run(run func(ctx context.Context)) *SettingRepository_GetSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SettingRepository_GetSyncIntegration_Call) Return(_a0 syncintegration.SyncIntegration, _a1 error) *SettingRepository_GetSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SettingRepository_GetSyncIntegration_Call) RunAndReturn(run func(context.Context) (syncintegration.SyncIntegration, error)) *SettingRepository_GetSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// SetSyncIntegration provides a mock function with given fields: ctx, integration
func (_m *SettingRepository) SetSyncIntegration(ctx context.Context, integration syncintegration.SyncIntegration) error {
	ret := _m.Called(ctx, integration)

	if len(ret) == 0 {
		panic("no return value specified for SetSyncIntegration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, syncintegration.SyncIntegration) error); ok {
		r0 = rf(ctx, integration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SettingRepository_SetSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSyncIntegration'
type SettingRepository_SetSyncIntegration_Call struct {
	*mock.Call
}

// SetSyncIntegration is a helper method to define mock.On call
//   - ctx context.Context
//   - integration syncintegration.SyncIntegration
func (_e *SettingRepository_Expecter) SetSyncIntegration(ctx interface{}, integration interface{}) *SettingRepository_SetSyncIntegration_Call {
	return &SettingRepository_SetSyncIntegration_Call{Call: _e.mock.On("SetSyncIntegration", ctx, integration)}
}

func (_c *SettingRepository_SetSyncIntegration_Call) Run(run func(ctx context.Context, integration syncintegration.SyncIntegration)) *SettingRepository_SetSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(syncintegration.SyncIntegration))
	})
	return _c
}

func (_c *SettingRepository_SetSyncIntegration_Call) Return(_a0 error) *SettingRepository_SetSyncIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SettingRepository_SetSyncIntegration_Call) RunAndReturn(run func(context.Context, syncintegration.SyncIntegration) error) *SettingRepository_SetSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// NewSettingRepository creates a new instance of SettingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSettingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SettingRepository {
	mock := &SettingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
